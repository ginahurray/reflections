1)How did viewing a diff between two versions of a file help you see the bug that was introduced.

Using a -u option, we can quickly check the difference we made and figure out
what causes the program an error in a fairly short time.

2)How could having easy access to the entire history of a file make you a more
effiecient programmer in the long term?

When something goes wrong, we can quickly revert to the latest working version.

3)What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
Docs does?

Pros: Commits are more logical and make sense.
Cons: If you forget to commit you might get into troubles.

4)why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Git thinks these files(usually codes) have relationship with each other
Google Docs allow different data types which normally don't have close
relationship to other files.

5)How can you use the commands git log and git diff to view the history of
files?

git log shows all the commits so far.
git diff allows you to compare the difference between two commits.

6)How might using version control make you more confident to make changes that
could break something?

If something broke, I can always switch back because I have a copy of the old
version. Thus, I will be more confident to make changes with version control =)

7)How do you want to use Git?

For code colaboration of course.

